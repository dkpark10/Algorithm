# 백준 12100번 2048(easy)

## 문제

2048 게임은 4×4 크기의 보드에서 혼자 즐기는 재미있는 게임이다. 이 링크를 누르면 게임을 해볼 수 있다.
이 게임에서 한 번의 이동은 보드 위에 있는 전체 블록을 상하좌우 네 방향 중 하나로 이동시키는 것이다. 
이때, 같은 값을 갖는 두 블록이 충돌하면 두 블록은 하나로 합쳐지게 된다. 한 번의 
이동에서 이미 합쳐진 블록은 또 다른 블록과 다시 합쳐질 수 없다. (실제 게임에서는 이동을 한 번
할 때마다 블록이 추가되지만, 이 문제에서 블록이 추가되는 경우는 없다)

![20481](https://user-images.githubusercontent.com/43857226/83316403-7dd6a300-a260-11ea-9669-16a295d064cd.PNG)

<그림 1>의 경우에서 위로 블록을 이동시키면 <그림 2>의 상태가 된다. 여기서, 왼쪽으로 블록을 이동시키면 <그림 3>의 상태가 된다.

![20482](https://user-images.githubusercontent.com/43857226/83316406-7e6f3980-a260-11ea-95f6-18b2a322234d.PNG)

<그림 4>의 상태에서 블록을 오른쪽으로 이동시키면 <그림 5>가 되고, 여기서 다시 
위로 블록을 이동시키면 <그림 6>이 된다. 여기서 오른쪽으로 블록을 이동시켜 <그림 7>을 만들 수 있다.

![20483](https://user-images.githubusercontent.com/43857226/83316410-7fa06680-a260-11ea-92cd-a81054e387c1.PNG)

<그림 8>의 상태에서 왼쪽으로 블록을 옮기면 어떻게 될까? 2가 충돌하기 때문에, 4로 합쳐지게 되고 <그림 9>의 상태가 된다.

![20484](https://user-images.githubusercontent.com/43857226/83316411-816a2a00-a260-11ea-86cf-5e2fa1034d75.PNG)

<그림 10>에서 위로 블록을 이동시키면 <그림 11>의 상태가 된다. 
<그림 12>의 경우에 위로 블록을 이동시키면 <그림 13>의 상태가 되는데, 그 이유는
한 번의 이동에서 이미 합쳐진 블록은 또 합쳐질 수 없기 때문이다.

![20485](https://user-images.githubusercontent.com/43857226/83316412-8202c080-a260-11ea-911d-bb329ea2390d.PNG)

마지막으로, 똑같은 수가 세 개가 있는 경우에는 이동하려고 하는 쪽의 칸이 먼저 합쳐진다. 예를 들어, 위로 이동시키는 경우에는 
위쪽에 있는 블록이 먼저 합쳐지게 된다. <그림 14>의 경우에 위로 이동하면 <그림 15>를 만든다.
이 문제에서 다루는 2048 게임은 보드의 크기가 N×N 이다. 보드의 크기와 보드판의 블록 상태가 주어졌을 때,
최대 5번 이동해서 만들 수 있는 가장 큰 블록의 값을 구하는 프로그램을 작성하시오.

## 코드

```c++
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>
#define MAX 21
using namespace std;
int N, ans = 0;

vector<int> Combine(vector<int>& v)                           // 결합함수 같으면 합치고 아니면 땡! 처리
{
	int idx = 0;
	while (idx < (int)v.size() - 1) {
		if (v[idx] == v[idx + 1]) {
			v[idx + 1] *= 2;
			v[idx] = 0;
			idx += 2;
		}
		else idx++;
	}
	return v;
}

int (*Move(int dir, int(*arr)[MAX])) [MAX]                            // 2차원배열 리턴함수
{
	vector<int >v;
	static int ret[MAX][MAX];
	memset(ret, 0, sizeof(ret));

	switch (dir) {

	case 0:																                              // 동 
		for (int i = 0; i < N; i++) {
			v.clear();
			for (int j = N - 1; j >= 0; j--) {
				if (arr[i][j]) v.push_back(arr[i][j]);
			}

			if (v.size() == 1) {
				ret[i][N - 1] = v[0];
				continue;
			}
			v = Combine(v);
			int idx = N - 1;
			for (int j = 0; j < (int)v.size(); j++) {
				if (v[j] == 0) continue;
				ret[i][idx] = v[j];
				idx--;
			}
		}
		return ret;
		break;

	case 1:																                                  // 서
		for (int i = 0; i < N; i++) {
			v.clear();
			for (int j = 0; j < N; j++) {
				if (arr[i][j]) v.push_back(arr[i][j]);
			}

			if (v.size() == 1) {
				ret[i][0] = v[0];
				continue;
			}
			v = Combine(v);
			int idx = 0;
			for (int j = 0; j < (int)v.size(); j++) {
				if (v[j] == 0) continue;
				ret[i][idx] = v[j];
				idx++;
			}
		}
		return ret;
		break;

	case 2:															                                        	// 남
		for (int i = 0; i < N; i++) {
			v.clear();
			for (int j = N - 1; j >= 0; j--) {
				if (arr[j][i]) v.push_back(arr[j][i]);
			}

			if (v.size() == 1) {
				ret[N - 1][i] = v[0];
				continue;
			}
			v = Combine(v);
			int idx = N - 1;
			for (int j = 0; j < (int)v.size(); j++) {
				if (v[j] == 0) continue;
				ret[idx][i] = v[j];
				idx--;
			}
		}
		return ret;
		break;

	case 3:															                                        // 북

		for (int i = 0; i < N; i++) {
			v.clear();
			for (int j = 0; j < N; j++) {
				if (arr[j][i]) v.push_back(arr[j][i]);
			}

			if (v.size() == 1) {
				ret[0][i] = v[0];
				continue;
			}
			v = Combine(v);
			int idx = 0;
			for (int j = 0; j < (int)v.size(); j++) {
				if (v[j] == 0) continue;
				ret[idx][i] = v[j];
				idx++;
			}
		}
		return ret;
		break;
	default: return ret; break;
	}
}

int Maxcnt(int arg[][MAX])
{
	int ret = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			ret = max(ret, arg[i][j]);
		}
	}
	return ret;
}

void F(int act, int cur[][MAX])                             // 두번째 인자는 현재 상태 
{
	if (act == 5) {                                           // 5번 이동 최대값 비교 
		ans = max(ans, Maxcnt(cur));
		return;
	}

	for (int i = 0; i < 4; i++) {
		int (*temp)[MAX] = Move(i, cur);                        // 이동하고 난 후 배열값 저장
		int arg[MAX][MAX];                                      
		memcpy(arg, temp, sizeof(int) * MAX * MAX);             // 다음 재귀함수로 넘겨줄 2차원 배열 복사 400바이트 복사 2차원배열이라도
		F(act + 1, arg);                                        // 물리적 메모리 구조는 선형으로 되어있으므로 
	}
}

int main() {

	scanf("%d", &N);
	int init[MAX][MAX];
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			scanf("%d", &init[i][j]);
		}
	}

	F(0, init);
	printf("%d\n", ans);
	return 0;
}
```

## 풀이

문제 자체는 크게 어렵지 않다. 흔히 푸는 완탐 DFS문제와 똑깥다. </br>
현재 상태배열에서 동서남북 이동해주고 나온 배열값 상태를 재귀적으로 풀어준다 </br>
이렇게 모든 방향을 완전탐색 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
